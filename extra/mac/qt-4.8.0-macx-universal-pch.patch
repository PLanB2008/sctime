--- configure.pch	2011-12-08 06:06:02.000000000 +0100
+++ configure	2012-03-08 21:30:15.000000000 +0100
@@ -3350,22 +3350,6 @@
 fi
 export SYSROOT_FLAG    # used by config.tests/unix/compile.test
 
-# auto-detect precompiled header support
-if [ "$CFG_PRECOMPILE" = "auto" ]; then
-    if [ `echo "$CFG_MAC_ARCHS" | wc -w` -gt 1 ]; then
-       CFG_PRECOMPILE=no
-    elif "$unixtests/precomp.test" "$TEST_COMPILER" "$OPT_VERBOSE"; then
-       CFG_PRECOMPILE=no
-    else
-       CFG_PRECOMPILE=yes
-    fi
-elif [ "$CFG_PRECOMPILE" = "yes" ] && [ `echo "$CFG_MAC_ARCHS" | wc -w` -gt 1 ]; then
-    echo
-    echo "WARNING: Using universal binaries disables precompiled headers."
-    echo
-    CFG_PRECOMPILE=no
-fi
-
 #auto-detect DWARF2 on the mac
 if [ "$PLATFORM_MAC" = "yes" ] && [ "$CFG_MAC_DWARF2" = "auto" ]; then
     if "$mactests/dwarf2.test" "$TEST_COMPILER" "$OPT_VERBOSE" "$mactests" ; then
@@ -3384,6 +3368,20 @@
     fi
 fi
 
+# auto-detect precompiled header support
+if [ "$CFG_PRECOMPILE" = "auto" ]; then
+    if "$unixtests/precomp.test" "$TEST_COMPILER" "$OPT_VERBOSE"; then
+       CFG_PRECOMPILE=no
+    else
+       CFG_PRECOMPILE=yes
+    fi
+elif [ "$CFG_PRECOMPILE" = "yes" ] && [ `echo "$CFG_MAC_ARCHS" | wc -w` -gt 1 ] && [ "$CFG_MAC_XARCH" != "yes" ]; then
+    echo
+    echo "WARNING: Using precompiled headers with universal binaries requires -Xarch support in GCC. (This requires gcc 4.2 or greater)"
+    echo
+    CFG_PRECOMPILE=no
+fi
+
 # don't autodetect support for separate debug info on objcopy when
 # cross-compiling as lots of toolchains seems to have problems with this
 if [ "$QT_CROSS_COMPILE" = "yes" ] && [ "$CFG_SEPARATE_DEBUG_INFO" = "auto" ]; then
--- qmake/generators/unix/unixmake.cpp.pch	2011-12-08 06:06:02.000000000 +0100
+++ qmake/generators/unix/unixmake.cpp	2012-03-08 21:30:15.000000000 +0100
@@ -190,7 +190,14 @@
             compile_flag = "-c";
 
         if(doPrecompiledHeaders() && !project->isEmpty("PRECOMPILED_HEADER")) {
-            QString pchFlags = var("QMAKE_" + comps[i] + "FLAGS_USE_PRECOMPILE");
+            QString pchFlags;
+
+            QStringList buildArchs = buildArchitectures();
+            if (buildArchs.length() > 1) {
+                pchFlags = var("QMAKE_" + comps[i] + "FLAGS_USE_PRECOMPILE_UNIVERSAL");
+            } else {
+                pchFlags = var("QMAKE_" + comps[i] + "FLAGS_USE_PRECOMPILE");
+            }
 
             QString pchBaseName;
             if(!project->isEmpty("PRECOMPILED_DIR")) {
@@ -398,6 +405,25 @@
 }
 
 QStringList
+UnixMakefileGenerator::buildArchitectures() const {
+    QStringList archs;
+
+    if (project->isActiveConfig("x86"))
+        archs << "i386";
+    if (project->isActiveConfig("x86_64"))
+        archs << "x86_64";
+    if (project->isActiveConfig("ppc"))
+        archs << "ppc";
+    if (project->isActiveConfig("ppc64"))
+        archs << "ppc64";
+
+    if (archs.isEmpty())
+        archs << QString();
+
+    return archs;
+}
+
+QStringList
 &UnixMakefileGenerator::findDependencies(const QString &file)
 {
     QStringList &ret = MakefileGenerator::findDependencies(file);
@@ -405,10 +431,15 @@
     // as dependency, so don't add precompiled header then
     if(doPrecompiledHeaders() && !project->isEmpty("PRECOMPILED_HEADER")
        && file != project->first("QMAKE_IMAGE_COLLECTION")) {
+
+        QStringList buildArchs = buildArchitectures();
+        foreach (QString arch, buildArchs) {
         QString header_prefix;
         if(!project->isEmpty("PRECOMPILED_DIR"))
             header_prefix = project->first("PRECOMPILED_DIR");
         header_prefix += project->first("QMAKE_ORIG_TARGET");
+        if (buildArchs.length() > 1)
+	    header_prefix += "-" + arch;
         if (!project->isActiveConfig("clang_pch_style"))
             header_prefix += project->first("QMAKE_PCH_OUTPUT_EXT");
         if (project->isActiveConfig("icc_pch_style")) {
@@ -464,6 +495,7 @@
                 }
             }
         }
+        }
     }
     return ret;
 }
--- qmake/generators/unix/unixmake.h.pch	2011-12-08 06:06:02.000000000 +0100
+++ qmake/generators/unix/unixmake.h	2012-03-08 21:30:15.000000000 +0100
@@ -52,6 +52,7 @@
     QString libtoolFileName(bool fixify=true);
     void writeLibtoolFile();     // for libtool
     void writePrlFile(QTextStream &);
+    QStringList buildArchitectures() const;
 
 public:
     UnixMakefileGenerator();
--- qmake/generators/unix/unixmake2.cpp.pch	2011-12-08 06:06:02.000000000 +0100
+++ qmake/generators/unix/unixmake2.cpp	2012-03-08 21:30:46.000000000 +0100
@@ -847,9 +847,13 @@
         QStringList precomp_files;
         QString precomph_out_dir;
 
+        QStringList buildArchs = buildArchitectures();
+        foreach (QString arch, buildArchs) {
         if(!project->isEmpty("PRECOMPILED_DIR"))
             precomph_out_dir = project->first("PRECOMPILED_DIR");
         precomph_out_dir += project->first("QMAKE_ORIG_TARGET");
+        if (buildArchs.length() > 1)
+            precomph_out_dir += "-" + arch;
         if (!project->isActiveConfig("clang_pch_style"))
             precomph_out_dir += project->first("QMAKE_PCH_OUTPUT_EXT");
 
@@ -883,6 +887,7 @@
                     precomp_files += precomph_out_dir + header_prefix + "objective-c++" + header_suffix;
             }
         }
+        }
         t << "-$(DEL_FILE) " << precomp_files.join(" ") << "\n\t";
     }
     if(!project->isEmpty("IMAGES"))
@@ -935,6 +940,9 @@
         t << "###### Prefix headers" << endl;
         QString comps[] = { "C", "CXX", "OBJC", "OBJCXX", QString() };
         for(int i = 0; !comps[i].isNull(); i++) {
+
+            QStringList buildArchs = buildArchitectures();
+            foreach (QString arch, buildArchs) {
             QString pchFlags = var("QMAKE_" + comps[i] + "FLAGS_PRECOMPILE");
             if(pchFlags.isEmpty())
                 continue;
@@ -950,6 +958,8 @@
             if(!project->isEmpty("PRECOMPILED_DIR"))
                 pchOutput = project->first("PRECOMPILED_DIR");
             pchOutput += pchBaseName;
+            if (buildArchs.length() > 1)
+                pchOutput += "-" + arch;
             if (!project->isActiveConfig("clang_pch_style"))
                 pchOutput += project->first("QMAKE_PCH_OUTPUT_EXT");
 
@@ -992,6 +1002,18 @@
                        .replace("${QMAKE_PCH_OUTPUT_BASE}", pchBaseName)
                        .replace("${QMAKE_PCH_OUTPUT}", pchOutput);
 
+            if (buildArchs.length() > 1) {
+                QStringList excludeArchs;
+                foreach (QString str, buildArchs) {
+                    if (str != arch)
+                        excludeArchs << str;
+                }
+
+                foreach (QString exclude, excludeArchs) {
+                    cflags = " $(subst -arch " + exclude + ",," + cflags + ")";
+                }
+            }
+
             QString compiler;
             if(comps[i] == "C" || comps[i] == "OBJC" || comps[i] == "OBJCXX")
                 compiler = "$(CC)";
@@ -1000,6 +1022,7 @@
 
             // compile command
             t << "\n\t" << compiler << cflags << " $(INCPATH) " << pchFlags << endl << endl;
+            }
         }
     }
 
--- qmake/option.cpp.pch	2011-12-08 06:06:02.000000000 +0100
+++ qmake/option.cpp	2012-03-08 21:30:15.000000000 +0100
@@ -401,13 +401,13 @@
     Option::js_ext = ".js";
     Option::ui_ext = ".ui";
     Option::h_ext << ".h" << ".hpp" << ".hh" << ".hxx";
-    Option::c_ext << ".c";
+    Option::c_ext << ".c" << ".m";
 #ifndef Q_OS_WIN
     Option::h_ext << ".H";
 #endif
     Option::cpp_moc_ext = ".moc";
     Option::h_moc_ext = ".cpp";
-    Option::cpp_ext << ".cpp" << ".cc" << ".cxx";
+    Option::cpp_ext << ".cpp" << ".cc" << ".cxx" << ".mm";
 #ifndef Q_OS_WIN
     Option::cpp_ext << ".C";
 #endif
--- mkspecs/common/gcc-base-macx.conf.pch	2011-12-08 06:06:02.000000000 +0100
+++ mkspecs/common/gcc-base-macx.conf	2012-03-08 21:35:52.000000000 +0100
@@ -48,3 +48,10 @@
 QMAKE_LFLAGS_VERSION        += -current_version$${LITERAL_WHITESPACE}
 QMAKE_LFLAGS_COMPAT_VERSION += -compatibility_version$${LITERAL_WHITESPACE}
 
+# mark this installation of Qt as supporting precompiled headers with universal
+# binaries
+CONFIG += precompiled_headers_universal
+QMAKE_CFLAGS_USE_PRECOMPILE_UNIVERSAL += -Xarch_i386 -include -Xarch_i386 ${QMAKE_PCH_OUTPUT_BASE}-i386 -Xarch_ppc -include -Xarch_ppc ${QMAKE_PCH_OUTPUT_BASE}-ppc -Xarch_x86_64 -include -Xarch_x86_64 ${QMAKE_PCH_OUTPUT_BASE}-x86_64 -Xarch_ppc64 -include -Xarch_ppc64 ${QMAKE_PCH_OUTPUT_BASE}-ppc64
+QMAKE_CXXFLAGS_USE_PRECOMPILE_UNIVERSAL = $$QMAKE_CFLAGS_USE_PRECOMPILE_UNIVERSAL
+QMAKE_OBJCFLAGS_USE_PRECOMPILE_UNIVERSAL = $$QMAKE_CFLAGS_USE_PRECOMPILE_UNIVERSAL
+QMAKE_OBJCXXFLAGS_USE_PRECOMPILE_UNIVERSAL = $$QMAKE_CFLAGS_USE_PRECOMPILE_UNIVERSAL
