SRC_DIR=$(shell pwd)
PATCH_DIR=$(SRC_DIR)

#HTTP_PROXY=http://http-proxy:3128
#FTP_PROXY=http://http-proxy:3128

WGET=http_proxy=$(HTTP_PROXY) ftp_proxy=$(FTP_PROXY) wget -Yon
WGET_OPTS=-c

PREFIX=$(SRC_DIR)/deps

SDK=/Developer/SDKs/MacOSX10.5.sdk

QT_VER=4.8.0
QT_BN=qt-everywhere-opensource-src-$(QT_VER)
QT_SOURCE_FILE=$(QT_BN).tar.gz
QT_URL=http://download.qt.nokia.com/qt/source/$(QT_SOURCE_FILE)
QT_DIR=$(SRC_DIR)/qt
QT_SOURCE=$(QT_DIR)/$(QT_SOURCE_FILE)
QT_SOURCE_DIR=$(QT_DIR)/$(QT_BN)

PGSQL_VER=9.1.2
PGSQL_BN=postgresql-$(PGSQL_VER)
PGSQL_SOURCE_FILE=$(PGSQL_BN).tar.bz2
PGSQL_URL=http://ftp.postgresql.org/pub/source/v$(PGSQL_VER)/$(PGSQL_SOURCE_FILE)
PGSQL_DIR=$(SRC_DIR)/postgres
PGSQL_SOURCE=$(PGSQL_DIR)/$(PGSQL_SOURCE_FILE)
PGSQL_SOURCE_DIR=$(PGSQL_DIR)/$(PGSQL_BN)
PGSQL_COMMON_CFLAGS=-isysroot $(SDK) -mmacosx-version-min=10.5
PGSQL_COMMON_LDFLAGS=-Wl,-syslibroot,$(SDK) -mmacosx-version-min=10.5
PGSQL_CONFIGURE_FLAGS=--with-openssl --without-perl --without-python --without-tcl --without-bonjour --without-pam --with-krb5 --without-libxml

.PHONY: all clean mrproper clean.destdir \
	qt.clean pgsql.mrproper \
	qt.mrproper pgsql.mrproper

.SUFFIXES:

all: $(QT_DIR)/installed

clean:	clean.destdir qt.clean pgsql.clean
mrproper:	clean.destdir qt.mrproper pgsql.mrproper

clean.destdir:
	rm -rf "$(PREFIX)"

### Qt

$(QT_DIR)/installed: $(QT_DIR)/compiled
	cd "$(QT_SOURCE_DIR)" && \
		$(MAKE) install \
		&& touch $@

$(QT_DIR)/compiled: $(QT_DIR)/configured
	cd "$(QT_SOURCE_DIR)" && \
		$(MAKE) \
		&& touch $@

$(QT_DIR)/configured: $(QT_DIR)/patched $(PGSQL_DIR)/installed
	cd "$(QT_SOURCE_DIR)" && \
		./configure -release \
			-opensource -confirm-license \
			-arch "x86_64 x86 ppc" \
			-sdk "$(SDK)" \
			-qt-sql-odbc -qt-sql-psql \
			-prefix "$(PREFIX)" \
			-no-exceptions \
			-verbose \
			-I"$(PREFIX)"/include \
			-L"$(PREFIX)"/lib \
		&& touch $@

$(QT_DIR)/patched: $(QT_DIR)/unpacked
	cd "$(QT_SOURCE_DIR)" && \
		for i in "$(PATCH_DIR)"/qt-*.patch ; do \
			[ "$$i" != "$(PATCH_DIR)"/qt-"*".patch ] && \
				patch -p0 < "$$i" ; \
		done && \
		touch $@

$(QT_DIR)/unpacked: $(QT_DIR)/downloaded
	cd "$(QT_DIR)" && \
		rm -rf "$(QT_SOURCE_DIR)" && \
		gtar -xzf "$(QT_SOURCE)" && \
		touch $@

$(QT_DIR)/downloaded:
	mkdir -p $(QT_DIR)
	rm -f "$(QT_SOURCE)" && \
		$(WGET) $(WGET_OPTS) -O "$(QT_SOURCE)" "$(QT_URL)" && \
		touch $@

qt.clean:
	rm -rf "$(QT_SOURCE_DIR)" \
		"$(QT_DIR)"/{unpacked,patched,configured,compiled,installed}

qt.mrproper:
	rm -rf "$(QT_DIR)"

### PostgreSQL

$(PGSQL_DIR)/installed: $(PGSQL_DIR)/compiled
	cd "$(PGSQL_SOURCE_DIR)" && \
		$(MAKE) install && \
		cp "$(PGSQL_SOURCE_DIR)"/src/include/pg_config_i386.h \
			"$(PGSQL_SOURCE_DIR)"/src/include/pg_config_x86_64.h \
			"$(PGSQL_SOURCE_DIR)"/src/include/pg_config_ppc.h \
			"$(PREFIX)"/include \
		&& touch $@

$(PGSQL_DIR)/compiled: $(PGSQL_DIR)/configured
	cd "$(PGSQL_SOURCE_DIR)" && \
		$(MAKE) \
		&& touch $@

$(PGSQL_DIR)/configured: $(PGSQL_DIR)/configured.i386
	cd "$(PGSQL_SOURCE_DIR)" && \
		CFLAGS="-arch i386 -arch x86_64 -arch ppc $(PGSQL_COMMON_CFLAGS)" \
			LDFLAGS="$(PGSQL_COMMON_LDFLAGS)" \
			./configure --prefix="$(PREFIX)" \
				$(PGSQL_CONFIGURE_FLAGS) && \
		find . -name Makefile -print -exec perl -p -i.backup \
			-e 's/\Q$$(LD) $$(LDREL) $$(LDOUT)\E (\S+) (.+)/\$$(LD) -arch ppc \$$(LDREL) \$$(LDOUT) $$1.ppc $$2; \$$(LD) -arch i386 \$$(LDREL) \$$(LDOUT) $$1.i386 $$2; \$$(LD) -arch x86_64 \$$(LDREL) \$$(LDOUT) $$1.x86_64 $$2; lipo -create -output $$1 $$1.ppc $$1.i386 $$1.x86_64/' {} \; && \
		echo "#ifdef __BIG_ENDIAN__" > src/include/pg_config.h && \
		echo "#include \"pg_config_ppc.h\"" >> src/include/pg_config.h && \
		echo "#elif __x86_64__" >> src/include/pg_config.h && \
		echo "#include \"pg_config_x86_64.h\"" >> src/include/pg_config.h && \
		echo "#else" >> src/include/pg_config.h && \
		echo "#include \"pg_config_i386.h\"" >> src/include/pg_config.h && \
		echo "#endif" >> src/include/pg_config.h && \
		touch $@

$(PGSQL_DIR)/configured.i386: $(PGSQL_DIR)/configured.x86_64
	cd "$(PGSQL_SOURCE_DIR)" && \
		CFLAGS="-arch i386 $(PGSQL_COMMON_CFLAGS)" \
			LDFLAGS="$(PGSQL_COMMON_LDFLAGS)" \
			./configure --prefix="$(PREFIX)" \
				$(PGSQL_CONFIGURE_FLAGS) && \
			mv src/include/pg_config.h src/include/pg_config_i386.h && \
			make distclean  && \
		touch "$@"

$(PGSQL_DIR)/configured.x86_64: $(PGSQL_DIR)/configured.ppc
	cd "$(PGSQL_SOURCE_DIR)" && \
		CFLAGS="-arch x86_64 $(PGSQL_COMMON_CFLAGS)" \
			LDFLAGS="$(PGSQL_COMMON_LDFLAGS)" \
			./configure --prefix="$(PREFIX)" \
				$(PGSQL_CONFIGURE_FLAGS) && \
		mv src/include/pg_config.h src/include/pg_config_x86_64.h && \
		make distclean  && \
		touch "$@"

$(PGSQL_DIR)/configured.ppc: $(PGSQL_DIR)/patched
	cd "$(PGSQL_SOURCE_DIR)" && \
		CFLAGS="-arch ppc $(PGSQL_COMMON_CFLAGS)" \
			LDFLAGS="$(PGSQL_COMMON_LDFLAGS)" \
			./configure --prefix="$(PREFIX)" \
				$(PGSQL_CONFIGURE_FLAGS) && \
			mv src/include/pg_config.h src/include/pg_config_ppc.h && \
			make distclean && \
		touch "$@"

$(PGSQL_DIR)/patched: $(PGSQL_DIR)/unpacked
	cd "$(PGSQL_SOURCE_DIR)" && \
		for i in "$(PATCH_DIR)"/pgsql-*.patch ; do \
			[ "$$i" == "$(PATCH_DIR)/pgsql-*.patch" ] || \
				patch -p0 < "$$i" ; \
		done && \
		touch $@

$(PGSQL_DIR)/unpacked: $(PGSQL_DIR)/downloaded
	cd "$(PGSQL_DIR)" && \
		rm -rf "$(PGSQL_SOURCE_DIR)" && \
		gtar -xjf "$(PGSQL_SOURCE)" && \
		touch $@

$(PGSQL_DIR)/downloaded:
	mkdir -p $(PGSQL_DIR)
	rm -f "$(PGSQL_SOURCE)" && \
		$(WGET) $(WGET_OPTS) -O "$(PGSQL_SOURCE)" "$(PGSQL_URL)" && \
		touch $@

pgsql.clean:
	rm -rf "$(PGSQL_SOURCE_DIR)" \
		"$(PGSQL_DIR)"/{unpacked,patched,configured,compiled,installed}

pgsql.mrproper:
	rm -rf "$(PGSQL_DIR)"
